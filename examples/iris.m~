%Clear existing data
clear all;
close all;
clc;

%Load iris dataset
load('fisheriris.mat');

%Convert species strings to numeric labels
classes = {'setosa','versicolor','virginica'};
labels = zeros(size(species,1),1);
for i = 1:1:length(classes)
    indices = find(~cellfun('isempty',strfind(species,classes{i})));
    labels(indices) = i;
end

%Split Dataset Based on 10-Fold Cross Validation
crossval_indices = crossvalind('Kfold',labels,10);



% 
% %Load Data
% trainingData = csvread('data/irisTraining.csv');
% trainingFeatures = trainingData(:,1:4);
% trainingClasses = trainingData(:,5);
% 
% trainingFeatures(trainingClasses == 3,:) = 1;
% trainingClasses(trainingClasses == 3) = 1;
% 
% trainingFeatures(trainingClasses == 2,:) = 0;
% trainingClasses(trainingClasses == 2) = 0;
% 
% testData = csvread('data/irisTesting.csv');
% testFeatures = testData(:,1:4);
% testClasses = testData(:,5);
% 
% testFeatures(testClasses == 3,:) = 1;
% testClasses(testClasses == 3) = 1;
% 
% testFeatures(testClasses == 2,:) = 0;
% testClasses(testClasses == 2) = 0;
% 
% disp('Dataset: Iris (Flower)')
% disp(['Number of Training Instances: ' num2str(size(trainingFeatures,1))]);
% disp(['Number of Test Instances: ' num2str(size(testFeatures,1))]);
% disp(['Number of Features (Measurements): ' num2str(size(trainingFeatures,2))]);
% disp(' ');
% 
% %HellingerTree
% tic();
% model = fit_Hellinger_tree(trainingFeatures,trainingClasses,1);
% trainingTime = toc();
% tic();
% predictions = predict_Hellinger_tree(model,testFeatures);
% testTime = toc();
% correct = (predictions == testClasses);
% correct = sum(correct) / length(correct);
% disp(['Percent of instances correctly classified: ' num2str(correct)]);
% disp(['Training time: ' num2str(trainingTime) ' seconds']);
% disp(['Test time: ' num2str(testTime) ' seconds']);
% disp(['Total time: ' num2str(trainingTime + testTime) ' seconds']);
% 
% %HellingerTreeFast
% tic();
% model = fit_Hellinger_tree_fast(trainingFeatures,trainingClasses,1,1);
% trainingTime = toc();
% tic();
% predictions = predict_Hellinger_tree(model,testFeatures);
% testTime = toc();
% correct = (predictions == testClasses);
% correct = sum(correct) / length(correct);
% disp(['Percent of instances correctly classified: ' num2str(correct)]);
% disp(['Training time: ' num2str(trainingTime) ' seconds']);
% disp(['Test time: ' num2str(testTime) ' seconds']);
% disp(['Total time: ' num2str(trainingTime + testTime) ' seconds']);
% 
