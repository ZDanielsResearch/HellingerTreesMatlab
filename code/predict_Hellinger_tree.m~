function predicted_classes = predict_Hellinger_tree(model,features)
%Function: predict_Hellinger_tree
%Form: predicted_classes = predict_Hellinger_tree(model,features)
%Description: Assign labels 
%Parameters:
%   features: I X F numeric matrix where I is the number of instances and F
%       is the number of features. Each row represents one training instance
%       and each column represents the value of one of its corresponding features
%   labels: I x 1 numeric matrix where I is the number of instances. Each
%       row is the label of a specific training instance and corresponds to
%       the same row in features
%   numBins (optional): Number of bins for discretizing numeric features. 
%        Default: 100
%   cutoff (optional): Number representing maximum number of instances in a
%       leaf node. Default: 10 if more than ten instances, 1 otherwise
%   memSplit (optional): If features matrix is large, compute discretization splits
%       iteratively in batches of size memSplit instead all at once. Default: 1
%   memThresh (optional): If features matrix is large, compute discretization splits
%       iteratively in batches of size memSplit only if number of instances
%       in branch is greater than memThresh. Default: 1
%Output:
%   model: a trained Hellinger Distance Decision Tree model

initialModel = model;
predicted_classes = zeros(size(features,1),1);
for i = 1:1:size(features,1)
    model = initialModel;
    complete = false;
    while ~complete
        if features(i,model.feature) <= model.threshold
            model = model.leftBranch;
        else
            model = model.rightBranch;
        end
        complete = model.complete;
    end
    predicted_classes(i) = model.label;
end
end